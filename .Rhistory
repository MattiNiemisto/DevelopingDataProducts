1+2
?ggplot
library(ggplot)
install.packages("ggplot")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("swirl")
install.packages("shiny")
install.packages("ggvis")
install.packages("lubridate")
library(swirl)
install_course("R Programming")
install_course("Getting and Cleaning Data")
quit
quit()
library(ggplot2)
library(xlsx)
installed.packages(xslx)
installed.packages("xslx")
library(xlsx)
install.package("xslx")
install.packages("xlsx")
library(xlsx)
library(XML)
install.packages("XML")
library(httr)
install.packages("RMySQL")
library(RMySQL)
dbConnect()
library(xlsx)
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("dplyr")
install.packages(readr)
install.packages("readr")
install.packages("tidyr")
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, mean = 30, lower.tail = FALSE)
pnorm(30+z, mean = 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd = 1, lower.tail = FALSE)
pnorm(30+z*2, mean = 32, sd = 2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(n = 26, power = .8, sd = 1)$delta
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues, "bonferroni") < .05)
sum(p.adjust(pValues, "FDR") < .05)
sum(p.adjust(pValues, "fdr") < .05)
sum(p.adjust(pValues, "BH") < .05)
tail(trueStatus)
table(pValues < .05, trueStatus)
table(pValues < 0.05, trueStatus)
table(pValues2 < 0.05, trueStatus)
0
24/500
table(p.adjust(pValues2, "bonferroni"), trueStatus)
table(p.adjust(pValues2, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2, method = "BH") < 0.05, trueStatus)
1/6
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMeans)
median(resampledMedians)
median(sh)
sam <- sample(fh, nh * B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
Bdata$count
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count - Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts,
| sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts,sample(group)))
perms > obs
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
A <- data.frame(Baseline = c(140,138,150,148,135), WK2 = c(132,135,151,146,130))
t.test(A$Baseline - A$WK2)
qt(.95,8)
qt(.95,8) / sqrt(8)
(qt(.95,8) / sqrt(8)) * 30 + 1100
?t.test
?qnorm
?qt
a <- c(1,1,1,0)
mu <- mean(a)
s_a <- sd(a)
mu
s_a
n <- 4
X <- 1
t<- (X-mu)/(s_a/sqrt(n))
t
pt(-abs(t), df = n-1)
pt(-abs(t), df = n-1)*2
pt(t, 3)
abs(t)
pt(-1,3)
t.test(c(1,1,1,0))
t.test(c(1,1,1,0), alternative = "less")
t.test(c(1,1,1,0), alternative = "greater")
t.test(c(1,1,1,-1), alternative = "greater")
t.test(c(1,1,1,-1), alternative = "less")
coke <- c(1,1,1,0)
pepsi <- c(0,0,0,1)
t.test(coke-pepsi, alternative = "less")
t.test(coke-pepsi, alternative = "greater")
t.test(coke-pepsi)
t.test(coke-pepsi, paired = TRUE)
t.test(coke,pepsi, paired = TRUE)
t.test(coke-pepsi, alternative = "greater")
pt(-abs(t), df = n-1)
pt(-abs(t), df = n-1)*2
pt(t, df = n-1)*2
pt(t, df = n-1)
pt(abs(t), df = n-1)
pt(-abs(t), df = n-1)
t<- (X-mu)/(s_a^2/sqrt(n))
pt(-abs(t), df = n-1)*2
amu <- 1/100
newmu <- 10/1787
t.test(amu-newmu)
a <- zeros(1787)
a <- rep(0, 1777)
a[length(a):length(a)+10] <- 1
as <- mean(a)
as
tail(a)
a <- rep(0, 1777)
a <- paste(a, rep(1, 10))
a
a <- rep(0, 1777)
b <- rep(1, 10)
a <- rep(0, 1787)
a[0:10]
a[0:10] <- 1
a
a <- rep(0, 1787)
a[0:9] <- 1
sum(a)
a[0] <- 1
a[0]
a[1]
a[1:10] <- 1
a
sum(a)
as <- mean(a)
asd <- sd(a)
asd
as
mut <- 1/100
mut
t <- (as - mut) / (sd/sqrt(1787))
aqrt(1787)
sqrt(1787)
sd
t <- (as - mut) / (asd/sqrt(1787))
t
pt(-abs(t), 1786)
pt(-abs(t), 1786)*2
hist(runif(1000))
mns = NULL
for (i in 1:1000) mns = c(mns,mean(runif(1000)))
hist(mns)
numSims <- 1000;
numDistributions <- 40;
lambda <- 0.2;
means <- NULL;
for (i in 1:numSims) means = c(means, mean(rexp(numDistributions ,lambda)))
## The sampled mean is
mean(means)
sd(means)
var(means)
sqrt(var(means))
sd(means) * sqrt(numDistributions)
qqnorm(means)
ggline(means)
qqline(means)
qqline(means, size = 2, col = 5)
qqline(means, lwd = 2, col = 5)
qqline(means, lw = 2, col = 5)
?qqline
qqnorm(means);
qqline(means, col=5);
hist(means, col="green", main="sampled exponential mean distribution", breaks=40)
hist(means, col="green", main="sampled exponential mean distribution", breaks=40)
abline(v = mean(means), lwd = 2, col="blue")
mean(means)
hist(means, col="green", main="sampled exponential mean distribution", breaks=40)
abline(v = mean(means), lwd = 2, col="blue")
abline(v = 5, lwd = 2, col="red")
hist(means, col="green", main="sampled exponential mean distribution", breaks=20)
abline(v = mean(means), lwd = 2, col="blue")
abline(v = 5, lwd = 2, col="red")
hist(means, col="green", mainhist(means, col="green", main="sampled exponential mean distribution", breaks=100)
abline(v = mean(means), lwd = 2, col="blue")
abline(v = 5, lwd = 2, col="red")="sampled exponential mean distribution", breaks=20)
abline(v = mean(means), lwd = 2, col="blue")
abline(v = 5, lwd = 2, col="red")
hist(means, col="green", main="sampled exponential mean distribution", breaks=100)
abline(v = mean(means), lwd = 2, col="blue")
abline(v = 5, lwd = 2, col="red")
hist(means, col="green", main="sampled exponential mean distribution", breaks=100)
abline(v = mean(means), lwd = 2, col="blue")
abline(v = 5, lwd = 2, col="red")
hist(means, col="green", main="sampled exponential mean distribution", breaks=100)
abline(v = mean(means), lwd = 1, col="blue")
abline(v = 5, lwd = 1, col="red")
hist(means, col="green", main="sampled exponential mean distribution", breaks=50)
abline(v = mean(means), lwd = 3, col="blue")
abline(v = 5, lwd = 3, col="red")
var(means)
var(means)*40
(1/lambda)^2
ggplot(c(sampled_var, theoretical_var), aes(x = sampled_var, y = theoretical_var))+geom_col()
sampled_var <- var(means) * numDistributions;
theoretical_var = (1/lambda)^2;
ggplot(c(sampled_var, theoretical_var), aes(x = sampled_var, y = theoretical_var))+geom_col()
df <- data.frame(c(sampled_var, theoretical_var))
df
df <- data.frame(x=sampled_var, y=theoretical_var)
df
ggplot(df, aes(x = sampled_var, y = theoretical_var))+geom_col()
ggplot(df, )+geom_col()
ggplot(df)+geom_col()
ggplot(df, aes(x = x, y = y))+geom_col()
hist(df)
df <- data.frame(x=c(sampled_vartheoretical_var))
df <- data.frame(x=c(sampled_var,theoretical_var))
ggplot(df, aes(x = x, y = y))+geom_col()
ggplot(df+geom_col()
)
ggplot(df)+geom_col()
df+geom_col()
df
hist(df)
ggplot(df)
geom_col()
ggplot(df)+geom_col(x=x)
ggplot(df)+geom_col(y=x)
?ggplot
df <- data.frame(x=c("Sampled, Theoretical"),y=c(sampled_var,theoretical_var))
ggplot(df, aes(x = x, y = y)) + geom_col()
ggplot(df, aes(x = x, y = y), group=x) + geom_col()
ggplot(df, aes(x = x, y = y), split=x) + geom_col()
ggplot(df, aes(x = x, y = y), color=x) + geom_col()
ggplot(df, aes(x = x, y = y, group = x)) + geom_col()
ggplot(df, aes(x = x, y = y, color = x)) + geom_col()
ggplot(df, aes(x = df[,1], y = df[,2], fill = df[,1])) + geom_col()
df
x=c("Sampled, Theoretical")
x
df <- data.frame(x=c("Sampled", "Theoretical"),y=c(sampled_var,theoretical_var))
ggplot(df, aes(x = x, y = y, fill = x)) + geom_col()
ggplot(df, aes(x = x, y = y, fill = x)) + geom_col() + labs(title = "Sampled variance vs Theoretical variance")
data("ToothGrowth")
dim(ToothGrowth);
str(ToothGrowth);
levels(factor(ToothGrowth$dose))
plot <- ggplot(ToothGrowth,
aes(x=factor(dose),y=len,fill=factor(dose)))
plot + geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dosage (Milligram)") +
scale_y_continuous("Length of Teeth") +
ggtitle("Exploratory Data Analyses")
ggplot(ToothGrowth, aes(x=factor(dose),y=len,fill=factor(dose))) +
geom_boxplot(notch=F) + facet_grid(.~supp) +
scale_x_discrete("Dose") +
scale_y_continuous("Teeth length") +
ggtitle("Length of teeth for different supplement and dosage")
supp.t1 <- t.test(len~supp, paired=F, var.equal=T, data=ToothGrowth)
supp.t2 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
supp.result <- data.frame("p-value"=c(supp.t1$p.value, supp.t2$p.value),
"Conf-Low"=c(supp.t1$conf[1],supp.t2$conf[1]),
"Conf-High"=c(supp.t1$conf[2],supp.t2$conf[2]),
row.names=c("Equal Var","Unequal Var"))
supp.result
supp.t1
?t.test
dose.t1 <- t.test(len~supp, ToothGrowth[ToothGrowth$dose == 0.5,]);
dose.t2 <- t.test(len~supp, ToothGrowth[ToothGrowth$dose == 1.0,]);
dose.t3 <- t.test(len~supp, ToothGrowth[ToothGrowth$dose == 2.0,]);
?table
table(rpois(100, 5))
table(c(dose.t1$p.value, dose.t2$p.value, dose.t3$p.value))
ToothGrowth[ToothGrowth$dose == 2.0]
ToothGrowth[ToothGrowth$dose == 2.0,]
ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC",]
mean(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC",])
mean(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC",], na.rm = TRUE)
mean(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC", "len"])
mean(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "OC", "len"])
mean(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "OJ", "len"])
t.test(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC", "len"] - ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "OJ", "len"])
t.test(ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "OJ", "len"] - ToothGrowth[ToothGrowth$dose == 2.0 & ToothGrowth$supp == "VC", "len"])
sampled_var <- var(means) * numDistributions;
theoretical_var = (1/lambda)^2;
df <- data.frame(x=c("Sampled", "Theoretical"),y=c(sampled_var,theoretical_var));
ggplot(df, aes(x = x, y = y, fill = x)) + geom_col() +
labs(title = "Sampled variance vs Theoretical variance");
setwd("D:/Code/DevelopingDataProducts")
library(plotly)
df <- read.csv("unemployment_in_finland.csv", sep = ";", stringsAsFactors = FALSE)
colnames(df) <- c("Variable", 2017:1991)
final_df <- as.data.frame(t(df))
colnames(final_df) <- c("Vacancies_end_of_Month", "All_Vacancies", "New_Vacancies", "Vacancies_filled", "Vacancies_filled_with_jobseekers_at_the_Employment_Service", "All_Unemployed", "Unemployed_Men", "Unemployed_Women")
final_df <- final_df[2:28,]
final_df$Year <- 2017:1991
indx <- sapply(final_df, is.factor)
final_df[indx] <- lapply(final_df[indx], function(x) as.numeric(as.character(x)))
final_df[,9] <- as.Date(as.character(final_df[,9]), format = "%Y")
p <- plot_ly(final_df, x = ~Year) %>%
add_lines(y = ~All_Vacancies, name = "All Vacant Positions") %>%
add_lines(y = ~Vacancies_end_of_Month, name = "Vacant Positions End of the Month")  %>%
add_lines(y = ~New_Vacancies, name = "New Open positions")  %>%
add_lines(y = ~Vacancies_filled, name = "Open Positions filled")  %>%
add_lines(y = ~Vacancies_filled_with_jobseekers_at_the_Employment_Service, name = "Vacant Positions filled with jobseekers at the Employment Service")  %>%
add_lines(y = ~All_Unemployed, name = "All Unemployed")  %>%
add_lines(y = ~Unemployed_Men, name = "Unemployed Men")  %>%
add_lines(y = ~Unemployed_Women, name = "Unemployed Women")  %>%
layout(
title = "Job Vacancies and unmployement in Finland 1991 - 2017",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 years",
step = "year",
stepmode = "backward"),
list(
count = 6,
label = "6 years",
step = "year",
stepmode = "backward"),
list(
count = 12,
label = "12 years",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider = list(type = "date")),
yaxis = list(title = "Vacancies and Unemployment"))
p
set
.seed( 123 )
x =
1 : 100
y
1 =
2
*
x + rnorm ( 100 )
y
2 = -
2
*
x + rnorm ( 100 )
plot
_ly
(
x =
x ,
y =
y
1 ,
type = ‘scatter’ ) %>%
add
_trace
(
x =
x ,
y =
y
2 ) %>%
layout
(
legend =
list(
x = 0.5 ,
y =
1 ,
bgcolor = ‘#F3F3F3’ ))
set.seed( 123 )
x =1 : 100
y1 =2*x + rnorm ( 100 )
y2 = -2*x + rnorm ( 100 )
plot_ly(x =x ,y =y1 ,
type = ‘scatter’ ) %>%
add_trace(x =x ,y =y2 ) %>%
layout(
legend =list(x = 0.5 ,y =1 ,bgcolor = ‘#F3F3F3’ ))
set.seed( 123 )
x =1 : 100
y1 =2*x + rnorm ( 100 )
y2 = -2*x + rnorm ( 100 )
plot_ly(x =x ,y =y1 ,type = ‘scatter’ ) %>%
add_trace(x =x ,y =y2 ) %>%
layout(
legend =list(x = 0.5 ,y =1 ,bgcolor = ‘#F3F3F3’ ))
set.seed( 123 )
x =1 : 100
y1 =2*x + rnorm ( 100 )
y2 = -2*x + rnorm ( 100 )
plot_ly(x =x ,y =y1 ,type = "scatter" ) %>%
add_trace(x =x ,y =y2 ) %>%
layout(
legend =list(x = 0.5 ,y =1 ,bgcolor = ‘#F3F3F3’ ))
set.seed( 123 )
x =1 : 100
y1 =2*x + rnorm ( 100 )
y2 = -2*x + rnorm ( 100 )
plot_ly(x =x ,y =y1 ,type = "scatter" ) %>%
add_trace(x =x ,y =y2 ) %>%
layout(
legend =list(x = 0.5 ,y=1 ,bgcolor = "#F3F3F3" ))
?plot_ly
